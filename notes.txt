-*- mode: markup; -*-

* Parts

Acceptors. Manage a server socket and accept connections from clients.
Each acceptor has a taskmaster which is responsible for calling
accept-connections and process-connection for each connection.

Taskmasters actually run the acceptors, either everything in one
thread (a single-threaded-taskmaster) or in a dedicated thread for
accept-connection and a new thread for each process-connection.

misc.lisp contains the low level “framework” above the lowest level
HTTP server—create-prefix-dispatcher, etc.

* Gross stripping

Senselessly removing all :documentation just to have less to look at.

De-genericizing.

* Reorganization ideas

Acceptor should not know about SSL—or maybe it should and we should
get rid of SSL acceptor; the acceptor can be parameterized with
something that changes the default port and which replaces the stream.

Acceptor should not have a document root.

My send-headers-and-wrap stream should be built in—there should be an
easy way for a response generator to specify that it wants a bivalent
stream. Or maybe setting an external format on the reply should cause
it to happen. (Hmmm, perhaps the right place is for SEND-HEADERS to
take an argument saying what kind of stream it wants. The default
could be a bivalent stream and you could specify :binary t to save the
cost of creating the flexistream.)

Mime-type data should be moved out of code.

Perhaps the reply and request objects should be passed in to handler
functions rather than as special variables.

* To do

Get rid of foo* functions. (Will presumably happen if *reply* and *request* are passed explicitly.

Where is the proper place for session handling? Get rid of sessions
machinery?

Break out logging into a separate object.

Possibly combine request and reply objects into a single object.

* Threading

create-request-handler-thread assumes that we will create 

* Bugs?

If you connect to an SSL acceptor with HTTP it hangs. Seems like something else should happen.

* Things a user may want to configure or customize.

** Dispatching

Acceptor reads an HTTP request and populates the request/reply object.
Then what code runs is up to a higher level dispatcher. We may want to
provide some simple ones.

** Error pages

When a request is handled, it may abort the handling of the request
with an HTTP status code indicating an error. The handlers should not
have to worry about generating an appropriate error page. There should
be a default error handler that generates Toot-branded error pages and
there should be an easy way to provide your own code to generate error
pages.

Logging (where to and what format)


* Flow

[acceptor] start -> 
[taskmaster] execute-acceptor ->
[acceptor] accept-connections (in new thread) -> 
[taskmaster] handle-incoming-connection -> 
[acceptor] process-connection (in new thread for each connection)-> 
[request] process-request (in loop) -> 
dispatch to user code.

* Response generation

process-request calls start-output to send an http-internal-server-error

send-headers calls start-output with no content

start-output calls send-response

* Random ideas

Instead of a handler just being able to return a string, perhaps it
can return any object for which there are methods defined that can
figure out how to render it and what the size of the rendering will
be.

  (defgeneric render-body (object stream))

  (defmethod render-body ((object string) stream)
    (write-string object stream))

* Renaming

headers-in -> request-headers
header-in -> request-header
headers-out -> reply-headers
header-out -> reply-header
return-code -> http-status-code or status-code
